levels(training0['classe'])
unique(training0['classe'])
library(caret)
colnames(training0)
str(training0)
summary(training0)
training0<-read.csv(rel_path_training)
head(training0)
str(training0)
head(training0)
training0<-read.csv(rel_path_training)
head(training0)
colnames(training0)
unique(training0$user_name)
dim(training0)
training0<-read.csv(rel_path_training)
head(training0)
dim(training0)
colnames(training0)
url_test <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
testing_data_filename<-'testing.csv'
rel_path_test<-make_data_file_download(data_dirname,raw_data_subdirname,url_testing,testing_data_filename)
url_testing <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
testing_data_filename<-'testing.csv'
rel_path_test<-make_data_file_download(data_dirname,raw_data_subdirname,url_testing,testing_data_filename)
testing_final<-read.csv(rel_path_testing)
url_testing <- 'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
testing_data_filename<-'testing.csv'
rel_path_testing<-make_data_file_download(data_dirname,raw_data_subdirname,url_testing,testing_data_filename)
testing_final<-read.csv(rel_path_testing)
head(testing_final)
dim(testing_final)
colnames(testing_final)
testing_final<-read.csv(rel_path_testing)
head(testing_final)
dim(testing_final)
colnames(testing_final)
unique(testing_final$user_name)
training_users<-unique(training0$user_name)
training0_users<-unique(training0$user_name)
testing_final<-read.csv(rel_path_testing)
head(testing_final)
dim(testing_final)
colnames(testing_final)
testing_users<-unique(testing_final$user_name)
training_users==testing_users
training_users
testing_users
sort(training_users)
testing_users
sort(training_users)==sort(testing_users)
apply(training0,unique)
sapply(training0,unique)
tapply(training0,unique)
sapply(training0,unique)
sapply(training0,function(x) count(unique(x)))
sapply(training0,function(x) length(unique(x)))
sapply(training0,function(x) sum(is.na(x))/length(x))
for(var in numeric_vars){
p1<-ggplot(training_pre1,aes(training_pre1[var],fill=classe))+xlab(var)+
geom_histogram()
show(p1)
}
source('data_directories.R')
library(caret)
set.seed(10819)
data_dirname <- 'data'
clean_data_subdirname<-'clean'
training_clean<-paste(data_dirname,'/',clean_data_subdirname,'/','training_clean.csv',sep='')
training0 <- read.csv(training_clean)
training0<- training0[,2:(dim(training0)[[2]])]
head(training0)
indTrain<-createDataPartition(training0$classe,p=0.80,list=FALSE)
training<-training0[indTrain,]
dim(training)
testing<-training0[-indTrain,]
dim(testing)
barplot(table(training['user_name']))
library(ggplot2)
numeric_vars<-colnames(training)[2:(length(colnames(training))-1)]
df<-as.data.frame(lapply(training[numeric_vars],as.numeric))
for(var in numeric_vars){
p1<-ggplot(df,aes(df[var]))+geom_histogram()+xlab(var)+geom_rug()
show(p1)
}
list_bad<-character()
list_bad
for(name in colnames(df)){
# compute mean
meanval<-mean(as.vector(df[,name]))
# compute standard deviation
sdval<-sd(as.vector(df[,name]))
df_temp<-df[as.vector((df[name]>(meanval+10*sdval)) | (df[name]<(meanval-10*sdval))),]
if(dim(df_temp)[[1]]>0){
list_bad<-append(list_bad,rownames(df_temp))
}
}
indBad<-as.numeric(unique(list_bad))
df2<-df[-indBad,]
for(var in numeric_vars){
p1<-ggplot(df2,aes(df2[var]))+geom_histogram()+xlab(var)+geom_rug()
show(p1)
}
training_no_outliers<-training[-indBad,]
preObj<-preProcess(training_no_outliers[-c(1,54)],method=c('center','scale'))
training_pre1<-predict(preObj,training_no_outliers[-c(1,54)])
training_pre1['user_name']<-training_no_outliers[1]
training_pre1['classe']<-training_no_outliers[54]
head(training_pre1)
PCA_vals<-prcomp(training_pre1[-c(53,54)])
PCA_vals$sdev
for(var in numeric_vars){
p1<-ggplot(training_pre1,aes(training_pre1[var],fill=classe))+xlab(var)+
geom_histogram()
show(p1)
}
numeric_vars
apply(numeric_vars,function(x) grep('_belt',x))
sapply(numeric_vars,function(x) grep('_belt',x))
lapply(numeric_vars,function(x) grep('_belt',x))
?apply
apply(numeric_vars,1,function(x) grep('_belt',x))
apply(numeric_vars,2,function(x) grep('_belt',x))
apply(numeric_vars,c(1),function(x) grep('_belt',x))
apply(numeric_vars,c(2),function(x) grep('_belt',x))
as.vector(lapply(numeric_vars,function(x) grep('_belt',x)))
as.vector(sapply(numeric_vars,function(x) grep('_belt',x)))
sapply(numeric_vars,function(x) grep('_belt',x))
lapply(numeric_vars,function(x) grep('_belt',x))
sapply(numeric_vars,function(x) grep('_belt',x))
as.data.frame(sapply(numeric_vars,function(x) grep('_belt',x)))
as.vector(sapply(numeric_vars,function(x) grep('_belt',x)))
apply(numeric_vars,function(x) grep('_belt',x))
apply(numeric_vars,c(1,2),function(x) grep('_belt',x))
apply(as.vector(numeric_vars),c(1,2),function(x) grep('_belt',x))
sapply(numeric_vars,function(x) grep('_belt',x))
data.frame(sapply(numeric_vars,function(x) grep('_belt',x)))
sapply(numeric_vars,function(x) grep('_belt',x))
grep('_belt',numeric_vars)
numeric_vars[grep('_belt',numeric_vars)]
numeric_vars
numeric_vars
grep('_belt',numeric_vars)
numeric_vars[grep('_belt',numeric_vars)]
numeric_vars[grep('_belt',numeric_vars)]
grep('_arm',numeric_vars)
numeric_vars[grep('_belt',numeric_vars)]
numeric_vars[grep('_arm',numeric_vars)]
numeric_vars[grep('_dumbell',numeric_vars)]
numeric_vars[grep('_dumbbell',numeric_vars)]
numeric_vars[grep('_forearm',numeric_vars)]
4*13
df<-training_pre1[c('total_accel_forearm',"total_accel_dumbbell","total_accel_arm","total_accel_belt",'classe')]
head(df)
installed.packages('GGallhy')
install.packages('GGallhy')
?pairs
df<-training_pre1[c('total_accel_forearm',"total_accel_dumbbell","total_accel_arm","total_accel_belt",'classe')]
pairs(df)
pairs(df[c('total_accel_forearm',"total_accel_dumbbell","total_accel_arm","total_accel_belt",'classe')])
pairs(df[c('total_accel_forearm',"total_accel_dumbbell","total_accel_arm","total_accel_belt")])
df<-training_pre1[c('total_accel_forearm',"total_accel_dumbbell","total_accel_arm","total_accel_belt",'classe')]
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell),colour=classe)+geom_point()
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point()
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=1)
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=0.1)
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=0.5)
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=0.05)
05
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=1)
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=0.5)
ggplot(df,aes(x=total_accel_forearm,y=total_accel_arm,colour=classe))+geom_point(size=0.5)
df<-training_pre1[c('total_accel_forearm',"total_accel_dumbbell","total_accel_arm","total_accel_belt",'classe')]
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=0.5,alpha=0.5)
df<-training_pre1[c('total_accel_forearm',"total_accel_dumbbell","total_accel_arm","total_accel_belt",'classe')]
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=0.5,alpha=0.2)
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=2,alpha=0.2)
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)
ggplot(df,aes(x=total_accel_forearm,y=total_accel_arm,colour=classe))+geom_point(size=1,alpha=0.2)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2,direction=-1)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe,direction=-1))+geom_point(size=1,alpha=0.2)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe,direction=-1))+geom_point(size=1,alpha=0.2)+scale_colour_brewer(direction=-1)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe,direction=-1))+geom_point(size=1,alpha=0.2)+scale_colour(direction=-1)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe,direction=-1))+geom_point(size=1,alpha=0.2)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe,direction=-1))+geom_point(size=1,alpha=0.5)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe,direction=-1))+geom_point(size=1,alpha=0.2)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe,order = -as.numeric(classe)))+geom_point(size=1,alpha=0.2)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe,order = as.numeric(classe)))+geom_point(size=1,alpha=0.2)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(breaks = c('E','D','C','B','A'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','orange'),breaks = c('E','D','C','B','A'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('pink','green','blue','yellow','red'),breaks = c('A','B','C','D','E'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+show(geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A')))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('pink','green','blue','yellow','red'),breaks = c('A','B','C','D','E'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe,breaks = c('A','B','C','D','E')))+geom_point(size=1,alpha=0.2)
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2,breaks = c('A','B','C','D','E'))
#+scale_color_manual(values=c('pink','green','blue','yellow','red'),breaks = c('A','B','C','D','E'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2),breaks = c('E','D','C','B','A')
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2,breaks = c('E','D','C','B','A'))
#+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2,breaks = c('A','B','C','D','E'))
#+scale_color_manual(values=c('pink','green','blue','yellow','red'),breaks = c('A','B','C','D','E'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('pink','green','blue','yellow','red'),breaks = c('A','B','C','D','E'))
ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+p1<-geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
p1<-ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
show(p1)
p2<-ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('pink','green','blue','yellow','red'),breaks = c('A','B','C','D','E'))
show(p2)
p1<-ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
print(p1)
p2<-ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('pink','green','blue','yellow','red'),breaks = c('A','B','C','D','E'))
print(p2)
p1<-ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
print(p1)
p2<-ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('pink','green','blue','yellow','red'),breaks = c('A','B','C','D','E'))
print(p1,p2)
p1<-ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
print(p1)
p2<-ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('pink','green','blue','yellow','red'),breaks = c('A','B','C','D','E'))
print(p2)
source('data_directories.R')
library(caret)
set.seed(10819)
data_dirname <- 'data'
clean_data_subdirname<-'clean'
training_clean<-paste(data_dirname,'/',clean_data_subdirname,'/','training_clean.csv',sep='')
training0 <- read.csv(training_clean)
training0<- training0[,2:(dim(training0)[[2]])]
head(training0)
indTrain<-createDataPartition(training0$classe,p=0.80,list=FALSE)
training<-training0[indTrain,]
dim(training)
testing<-training0[-indTrain,]
dim(testing)
barplot(table(training['user_name']))
library(ggplot2)
numeric_vars<-colnames(training)[2:(length(colnames(training))-1)]
df<-as.data.frame(lapply(training[numeric_vars],as.numeric))
for(var in numeric_vars){
p1<-ggplot(df,aes(df[var]))+geom_histogram()+xlab(var)+geom_rug()
show(p1)
}
list_bad<-character()
list_bad
for(name in colnames(df)){
# compute mean
meanval<-mean(as.vector(df[,name]))
# compute standard deviation
sdval<-sd(as.vector(df[,name]))
df_temp<-df[as.vector((df[name]>(meanval+10*sdval)) | (df[name]<(meanval-10*sdval))),]
if(dim(df_temp)[[1]]>0){
list_bad<-append(list_bad,rownames(df_temp))
}
}
indBad<-as.numeric(unique(list_bad))
df2<-df[-indBad,]
for(var in numeric_vars){
p1<-ggplot(df2,aes(df2[var]))+geom_histogram()+xlab(var)+geom_rug()
show(p1)
}
training_no_outliers<-training[-indBad,]
preObj<-preProcess(training_no_outliers[-c(1,54)],method=c('center','scale'))
training_pre1<-predict(preObj,training_no_outliers[-c(1,54)])
training_pre1['user_name']<-training_no_outliers[1]
training_pre1['classe']<-training_no_outliers[54]
head(training_pre1)
PCA_vals<-prcomp(training_pre1[-c(53,54)])
PCA_vals$sdev
sum(PCA_vals$sdev[1:35])/sum(PCA_vals$sdev)
for(var in numeric_vars){
p1<-ggplot(training_pre1,aes(training_pre1[var],fill=classe))+xlab(var)+
geom_histogram()
show(p1)
}
numeric_vars
numeric_vars[grep('_belt',numeric_vars)]
numeric_vars[grep('_arm',numeric_vars)]
numeric_vars[grep('_dumbbell',numeric_vars)]
numeric_vars[grep('_forearm',numeric_vars)]
df<-training_pre1[c('total_accel_forearm',"total_accel_dumbbell","total_accel_arm","total_accel_belt",'classe')]
ggplot(df,aes(x=total_accel_forearm,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)
ggplot(df,aes(x=total_accel_forearm,y=total_accel_arm,colour=classe))+geom_point(size=1,alpha=0.2)
p1<-ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('red','yellow','blue','green','pink'),breaks = c('E','D','C','B','A'))
print(p1)
p2<-ggplot(df,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)+scale_color_manual(values=c('pink','green','blue','yellow','red'),breaks = c('A','B','C','D','E'))
print(p2)
training_pre1
library(dplyr)
test<-group_by(training_pre1[-c(53)],classe)
summary_vars_class<-summarise_each(test,funs(mean))
variability_summary_vars<-apply(summary_vars_class,2,sd)
variability_summary_vars<-variability_summary_vars[2:length(variability_summary_vars)]
ordered_var_sumr_vars<-variability_summary_vars[order(variability_summary_vars[2:length(variability_summary_vars)],decreasing=TRUE)]
#length(ordered_var_sumr_vars[ordered_var_sumr_vars>mean(variability_summary_vars)])
#important_vars<-names(ordered_var_sumr_vars[ordered_var_sumr_vars>mean(variability_summary_vars)])
important_vars<-names(ordered_var_sumr_vars[ordered_var_sumr_vars>0.1])
important_vars<-c(important_vars,'classe')
#summarize(test,mean=mean)
summarise_each(test,funs(sd))
training_pre1[important_vars]
table(training_pre1['classe'])
training_final<-training_pre1[sample(1:dim(training_pre1)[[1]],dim(training_pre1)[[1]],replace = FALSE),]
library(doMC)
registerDoMC(cores = 6)
small_training <- training_pre1[sample(1:dim(training_pre1)[[1]],2000,replace = FALSE),]
svm_small1<- train(classe~.,method='svmLinear',data=small_training,verbose=F)
svm_small2<- train(classe~.,method='svmLinear',data=small_training[,c(colnames(small_training)[1:52],'classe')],verbose=F)
svm_small3<- train(classe~.,method='svmLinear',data=small_training[,important_vars],verbose=F)
svm_small1
svm_small2
svm_small3
library(doMC)
registerDoMC(cores = 6)
gbm_small1<- train(classe~.,method='gbm',data=small_training,verbose=F)
gbm_small2<- train(classe~.,method='gbm',data=small_training[,c(colnames(small_training)[1:52],'classe')],verbose=F)
gbm_small3<- train(classe~.,method='gbm',data=small_training[,important_vars],verbose=F)
gbm_small1
gbm_small2
gbm_small3
rf_small1<- train(classe~.,method='rf',data=small_training,verbose=F)
rf_small2<- train(classe~.,method='rf',data=small_training[,c(colnames(small_training)[1:52],'classe')],verbose=F)
rf_small3<- train(classe~.,method='rf',data=small_training[,important_vars],verbose=F)
rf_small1
rf_small2
rf_small3
lda_small1<- train(classe~.,method='lda',data=small_training,verbose=F)
lda_small2<- train(classe~.,method='lda',data=small_training[,c(colnames(small_training)[1:52],'classe')],verbose=F)
lda_small3<- train(classe~.,method='lda',data=small_training[,important_vars],verbose=F)
lda_small1
lda_small2
lda_small3
svm_small1<- train(classe~.,method='svmLinear',data=small_training,verbose=F)
svm_small2<- train(classe~.,method='svmLinear',data=small_training[,c(colnames(small_training)[1:52],'classe')],verbose=F)
svm_small3<- train(classe~.,method='svmLinear',data=small_training[,important_vars],verbose=F)
svm_small1
svm_small2
svm_small3
svm_rad_small1<- train(classe~.,method='svmRadial',data=small_training,verbose=F)
svm_rad_small2<- train(classe~.,method='svmRadial',data=small_training[,c(colnames(small_training)[1:52],'classe')],verbose=F)
svm_rad_small3<- train(classe~.,method='svmRadial',data=small_training[,important_vars],verbose=F)
svm_rad_small1
svm_rad_small2
svm_rad_small3
require(gridExtra)
df<-as.data.frame(lapply(training[numeric_vars],as.numeric))
library(caret)
library(ggplot2)
library(plyr)
library(dplyr)
source('data_directories.R') # My own file management functions
set.seed(10819)
data_dirname <- 'data'                  # data dir name
clean_data_subdirname<-'clean'          # clean data dir name
training_clean<-paste(data_dirname,'/', # clean data filename
clean_data_subdirname,
'/','training_clean.csv',
sep='')
training0 <- read.csv(training_clean)   # reading training file
training0<- training0[,                 # removing redundant index column
2:(dim(training0)[[2]])]
indTrain<-createDataPartition(          # Using 80% for training and CV
training0$classe,p=0.80,list=FALSE)
training<-training0[indTrain,]          # Trainingand CV set
testing<-training0[-indTrain,]          # Test set for final estimates
require(gridExtra)
df<-as.data.frame(lapply(training[numeric_vars],as.numeric))
require(gridExtra)
numeric_vars<-colnames(training)[2:(length(colnames(training))-1)]
df<-as.data.frame(lapply(training[numeric_vars],as.numeric))
plot1<-ggplot(df,aes(df['accel_arm_z']))+geom_histogram()+xlab('accel_arm_z')+geom_rug()
plot1<-ggplot(df,aes(df['gyros_dumbbell_y']))+geom_histogram()+xlab('accel_arm_z')+geom_rug()
grid.arrange(plot1, plot2, ncol=2)
require(gridExtra)
numeric_vars<-colnames(training)[2:(length(colnames(training))-1)]
df<-as.data.frame(lapply(training[numeric_vars],as.numeric))
plot1<-ggplot(df,aes(df['accel_arm_z']))+geom_histogram()+xlab('accel_arm_z')+geom_rug()
plot2<-ggplot(df,aes(df['gyros_dumbbell_y']))+geom_histogram()+xlab('accel_arm_z')+geom_rug()
grid.arrange(plot1, plot2, ncol=2)
require(gridExtra)
numeric_vars<-colnames(training)[2:(length(colnames(training))-1)]
df<-as.data.frame(lapply(training[numeric_vars],as.numeric))
plot1<-ggplot(df,aes(df['accel_arm_z']))+geom_histogram()+xlab('accel_arm_z')+geom_rug()
plot2<-ggplot(df,aes(df['gyros_dumbbell_y']))+geom_histogram()+xlab('accel_arm_z')+geom_rug()
grid.arrange(plot1, plot2, ncol=2)
?grid.arrange
library(caret)
library(ggplot2)
library(plyr)
library(dplyr)
source('data_directories.R') # My own file management functions
set.seed(10819)
data_dirname <- 'data'                  # data dir name
clean_data_subdirname<-'clean'          # clean data dir name
training_clean<-paste(data_dirname,'/', # clean data filename
clean_data_subdirname,
'/','training_clean.csv',
sep='')
training0 <- read.csv(training_clean)   # reading training file
training0<- training0[,                 # removing redundant index column
2:(dim(training0)[[2]])]
indTrain<-createDataPartition(          # Using 80% for training and CV
training0$classe,p=0.80,list=FALSE)
training<-training0[indTrain,]          # Trainingand CV set
testing<-training0[-indTrain,]          # Test set for final estimates
require(gridExtra)
numeric_vars<-colnames(training)[2:(length(colnames(training))-1)]
df<-as.data.frame(lapply(training[numeric_vars],as.numeric))
plot1<-ggplot(df,aes(df['accel_arm_z']))+geom_histogram()+xlab('accel_arm_z')+geom_rug()
plot2<-ggplot(df,aes(df['gyros_dumbbell_y']))+geom_histogram()+xlab('accel_arm_z')+geom_rug()
grid.arrange(plot1, plot2, ncol=2)
list_bad<-character()
for(name in colnames(df)){
# compute mean
meanval<-mean(as.vector(df[,name]))
# compute standard deviation
sdval<-sd(as.vector(df[,name]))
# check if an outlier
df_temp<-df[as.vector((df[name]>(meanval+10*sdval)) | (df[name]<(meanval-10*sdval))),]
if(dim(df_temp)[[1]]>0){
list_bad<-append(list_bad,rownames(df_temp))
}
}
indBad<-as.numeric(unique(list_bad)) # list of outliers
training_no_outliers<-training[-indBad,] # train data without outliers
# Applying feature scalling
preObj<-preProcess(training_no_outliers[-c(1,54)],method=c('center','scale'))
# Now prepare new dataframe
training_pre1<-predict(preObj,training_no_outliers[-c(1,54)])
training_pre1['user_name']<-training_no_outliers[1]
training_pre1['classe']<-training_no_outliers[54]
ggplot(training_pre1,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)
test<-group_by(training_pre1[-c(53)],classe)
summary_vars_class<-summarise_each(test,funs(mean))
summary_vars_class[1:3]
variability_summary_vars<-apply(summary_vars_class,2,sd)
variability_summary_vars<-variability_summary_vars[2:length(variability_summary_vars)]
ordered_var_sumr_vars<-variability_summary_vars[order(variability_summary_vars[2:length(variability_summary_vars)],decreasing=TRUE)]
important_vars<-names(ordered_var_sumr_vars[ordered_var_sumr_vars>0.1])
important_vars<-c(important_vars,'classe')
important_vars
training_final<-training_pre1[sample(1:dim(training_pre1)[[1]],dim(training_pre1)[[1]],replace = FALSE),]
gbm32<- train(classe~.,method='gbm',data=training_final[1:100,],trControl = trainControl(method="cv"),verbose=F)
gbm32
gbm32<- train(classe~.,method='gbm',data=training_final[1:100,],trControl = trainControl("cv",3),verbose=F)
gbm32
gbm32<- train(classe~.,method='gbm',data=training_final[1:1000,],trControl = trainControl("cv",3),verbose=F)
gbm32
gbm32<- train(classe~.,method='gbm',data=training_final[1:5000,],trControl = trainControl("cv",3),verbose=F)
library(caret)
library(ggplot2)
library(plyr)
library(dplyr)
source('data_directories.R') # My own file management functions
set.seed(10819)
data_dirname <- 'data'                  # data dir name
clean_data_subdirname<-'clean'          # clean data dir name
training_clean<-paste(data_dirname,'/', # clean data filename
clean_data_subdirname,
'/','training_clean.csv',
sep='')
training0 <- read.csv(training_clean)   # reading training file
training0<- training0[,                 # removing redundant index column
2:(dim(training0)[[2]])]
indTrain<-createDataPartition(          # Using 80% for training and CV
training0$classe,p=0.80,list=FALSE)
training<-training0[indTrain,]          # Trainingand CV set
testing<-training0[-indTrain,]          # Test set for final estimates
require(gridExtra)
numeric_vars<-colnames(training)[2:(length(colnames(training))-1)]
df<-as.data.frame(lapply(training[numeric_vars],as.numeric))
plot1<-ggplot(df,aes(df['accel_arm_z']))+geom_histogram()+xlab('accel_arm_z')+geom_rug()
plot2<-ggplot(df,aes(df['gyros_dumbbell_y']))+geom_histogram()+xlab('accel_arm_z')+geom_rug()
grid.arrange(plot1, plot2, ncol=2)
list_bad<-character()
for(name in colnames(df)){
# compute mean
meanval<-mean(as.vector(df[,name]))
# compute standard deviation
sdval<-sd(as.vector(df[,name]))
# check if an outlier
df_temp<-df[as.vector((df[name]>(meanval+10*sdval)) | (df[name]<(meanval-10*sdval))),]
if(dim(df_temp)[[1]]>0){
list_bad<-append(list_bad,rownames(df_temp))
}
}
indBad<-as.numeric(unique(list_bad)) # list of outliers
training_no_outliers<-training[-indBad,] # train data without outliers
# Applying feature scalling
preObj<-preProcess(training_no_outliers[-c(1,54)],method=c('center','scale'))
# Now prepare new dataframe
training_pre1<-predict(preObj,training_no_outliers[-c(1,54)])
training_pre1['user_name']<-training_no_outliers[1]
training_pre1['classe']<-training_no_outliers[54]
ggplot(training_pre1,aes(x=total_accel_belt,y=total_accel_dumbbell,colour=classe))+geom_point(size=1,alpha=0.2)
test<-group_by(training_pre1[-c(53)],classe)
summary_vars_class<-summarise_each(test,funs(mean))
summary_vars_class[1:3]
variability_summary_vars<-apply(summary_vars_class,2,sd)
variability_summary_vars<-variability_summary_vars[2:length(variability_summary_vars)]
ordered_var_sumr_vars<-variability_summary_vars[order(variability_summary_vars[2:length(variability_summary_vars)],decreasing=TRUE)]
important_vars<-names(ordered_var_sumr_vars[ordered_var_sumr_vars>0.1])
important_vars<-c(important_vars,'classe')
important_vars
training_final<-training_pre1[sample(1:dim(training_pre1)[[1]],dim(training_pre1)[[1]],replace = FALSE),]
library(doMC)
registerDoMC(cores = 6)
gbm32<- train(classe~.,method='gbm',data=training_final[1:5000,],trControl = trainControl("cv",3),verbose=F)
